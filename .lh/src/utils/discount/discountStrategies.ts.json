{
    "sourceFile": "src/utils/discount/discountStrategies.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1717234889734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717335946073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n const thresholdDiscount: DiscountStrategy = (cart, discountValue, args) => {\n   if (args.type !== \"threshold\")\n     throw new Error(\"Invalid arguments for threshold discount\");\n   const total = calculateTotal(cart);\n-  return total > args.threshold ? discountValue : 0;\n+  return total >= args.threshold ? discountValue : 0;\n };\n \n const bogofDiscount: DiscountStrategy = (cart, _discountValue, args) => {\n   if (args.type !== \"bogof\")\n"
                }
            ],
            "date": 1717234889734,
            "name": "Commit-0",
            "content": "import type { Product } from \"../../components/product/product.types\";\nimport type { Discount } from \"./discount.types\";\n\ntype DiscountStrategy = (\n  cart: Product[],\n  discountValue: number,\n  args: Discount,\n) => number;\n\nconst calculateTotal = (cart: Product[]): number =>\n  cart.reduce((sum, product) => sum + product.price * product.quantity, 0);\n\nconst overallDiscount: DiscountStrategy = (cart, discountValue, args) => {\n  if (args.type !== \"overall\")\n    throw new Error(\"Invalid arguments for overall discount\");\n  const total = calculateTotal(cart);\n  return total * discountValue;\n};\n\nconst thresholdDiscount: DiscountStrategy = (cart, discountValue, args) => {\n  if (args.type !== \"threshold\")\n    throw new Error(\"Invalid arguments for threshold discount\");\n  const total = calculateTotal(cart);\n  return total > args.threshold ? discountValue : 0;\n};\n\nconst bogofDiscount: DiscountStrategy = (cart, _discountValue, args) => {\n  if (args.type !== \"bogof\")\n    throw new Error(\"Invalid arguments for BOGOF discount\");\n  let discount = 0;\n  cart.forEach((product) => {\n    if (args.applicableProductIds.includes(product.productId)) {\n      discount += Math.floor(product.quantity / 2) * product.price;\n    }\n  });\n  return discount;\n};\n\nexport const getDiscountStrategy = (discount: Discount): DiscountStrategy => {\n  switch (discount.type) {\n    case \"overall\":\n      return overallDiscount;\n    case \"threshold\":\n      return thresholdDiscount;\n    case \"bogof\":\n      return bogofDiscount;\n    default:\n      throw new Error(\"Unsupported discount type\");\n  }\n};\n"
        }
    ]
}